<%_
func importImportsIfNeeded() -> String {
    guard let imports = arguments["imports"] as? [String] else { return "" }
    return imports.map { "import \($0)" }.joined(separator: "\n")
}

func generateComparableFunc(_ operatorString: String, operandSuffix: String) -> String {
    return """
        public static func \(operatorString)(lhs: Self, rhs: Self) -> Bool {
            return lhs\(operandSuffix) \(operatorString) rhs\(operandSuffix)
        }
    """
}

func generateComparable(operandSuffix: String) -> String {
    return ["<", ">", ">=", "<=", "=="].map { generateComparableFunc($0, operandSuffix: operandSuffix) }.joined(separator: "\n\n")
}

func associatedEnumCase(_ enumCase: EnumCase, declareVariable: Bool = true) -> String {
    var itertor = 0
    func nextValue() -> String {
        defer { itertor += 1 }
        return "arg\(itertor)"
    }
    return enumCase.associatedValues.map { $0.localName ?? nextValue() }.map { declareVariable ? "let \($0)" : $0 }.joined(separator: ", ")
}
-%>
<%_ -%>
<%= importImportsIfNeeded() -%>



extension StrippedRepresentation where Self.RawValue: Comparable {
    <%_= generateComparable(operandSuffix: ".rawValue") %>
}

extension AssociatedValueStrippable {
    <%_= generateComparable(operandSuffix: ".stripped") %>
}

public extension AssociatedValueEnumExtractor {
    func associatedValueTyped<T>() -> T? {
        if let value = associatedValue as? T {
            return value
        } else if let recursive = associatedValue as? AssociatedValueEnumExtractor, let value = recursive.associatedValue as? T {
            return value
        } 
        return nil
    }
}

public extension Collection where Iterator.Element: AssociatedValueStrippable, Iterator.Element: Hashable {
    func contains<Stripped>(_ element: Stripped) -> Bool where Stripped == Iterator.Element.Stripped {
        return map { $0.stripped }.contains(element)
    }
}

public extension Collection where Iterator.Element: AssociatedValueStrippable, Iterator.Element: AssociatedValueEnumExtractor {
    func associatedValue<AssociatedValue, Stripped>(_ element: Stripped) -> AssociatedValue? where Stripped == Iterator.Element.Stripped {
        for item in self {
            guard item.stripped == element else { continue }
            return item.associatedValueTyped()
        }
        return nil
    }
}

<%_ types.enums.filter { $0.based["AutoAssociatedValueEnum"] != nil }.filter { $0.hasAssociatedValues }.forEach { _enumType in -%>
extension <%= _enumType.name -%>: AssociatedValueEnumExtractor {
    public var associatedValue: Any? {
        switch self {
    <%_ _enumType.cases.forEach { _enumCase in -%>
        <%_  if _enumCase.associatedValues.count == 1 { -%>
            case .<%= _enumCase.name %>(let <%= _enumCase.name %>):
                return <%= _enumCase.name %>
        <%_ } else if _enumCase.associatedValues.count > 1 { -%>
            case .<%= _enumCase.name %>(<%= associatedEnumCase(_enumCase) %>):
                return (<%= associatedEnumCase(_enumCase, declareVariable: false) %>)
        <%_ } else if _enumCase.associatedValues.count == 0 { -%>
            case .<%= _enumCase.name %>: return nil
        <%_ } -%>
    <%_ } -%>
        }
    }

    <%_  _enumType.cases.filter { $0.associatedValues.count == 1 }.forEach { _enumCase in  -%>
        <%_  guard let associatedValueName = _enumCase.associatedValues.first?.typeName.unwrappedTypeName else { return } -%>
    var <%= _enumCase.name %>: <%= associatedValueName %>? {
        switch self {
            case .<%= _enumCase.name %>(let <%= _enumCase.name %>):
                return <%= _enumCase.name %>
            default: return nil
        }
    }

    <%_ } -%>
}

public enum <%= _enumType.name %>Stripped: String, StrippedRepresentation {
    case <%= _enumType.cases.map { $0.name }.joined(separator: ", ")  %>
} 

extension <%= _enumType.name %>: AssociatedValueStrippable {
    public typealias Stripped = <%= _enumType.name %>Stripped
    public var stripped: Stripped {
        switch self {
    <%_ _enumType.cases.forEach { _enumCase in -%>
            case .<%= _enumCase.name %>: return .<%= _enumCase.name %>
            <%_ } -%>
        }
    }
}

extension <%= _enumType.name %>Stripped {
    public var hashValue: Int {
        return rawValue.hashValue
    }

}

extension <%= _enumType.name %>: Hashable {
    public var hashValue: Int {
        return stripped.hashValue
    }
}

<%_ } -%>