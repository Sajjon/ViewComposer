public protocol AssociatedValueEnumExtractor {
    var associatedValue: Any? { get }
}

public extension AssociatedValueEnumExtractor {
    func associatedValueTyped<T>() -> T? {
        if let value = associatedValue as? T {
            return value
        } else if let recursive = associatedValue as? AssociatedValueEnumExtractor, let value = recursive.associatedValue as? T {
            return value
        } 
        return nil
    }
}

public protocol StrippedRepresentation: RawRepresentable, Hashable {}
public protocol AssociatedValueStrippable: Equatable {
    associatedtype Stripped: StrippedRepresentation
    var stripped: Stripped { get }
}

{% for enum in types.implementing.AutoAssociatedValueEnum|enum %}
    {% if enum.hasAssociatedValues %}
        extension {{ enum.name }}: AssociatedValueEnumExtractor {
            public var associatedValue: Any? {
                switch self {
                    {% for case in enum.cases %}
                        {% if case.hasAssociatedValue %}
                            {% if case.associatedValues.count == 1 %}
                                case .{{ case.name }}(let {{ case.name }}):
                                    return {{ case.name }}
                            {% else %}
                                case .{{ case.name }}({% for associated in case.associatedValues %}let {{ associated.externalName }}{% if not forloop.last %}, {% endif %}{% endfor %}):
                                    return ({% for associated in case.associatedValues %}{{ associated.externalName }}{% if not forloop.last %}, {% endif %}{% endfor %})
                            {% endif %}
                        {% else %}
                            case .{{ case.name }}: return nil
                        {% endif %}
                    {% endfor %}
                }
            }

            {% for case in enum.cases %}
                {% if case.associatedValues.count == 1 %}
                    var {{ case.name }}: {{ case.associatedValues.first.typeName.unwrappedTypeName }}? {
                        switch self {
                            case .{{ case.name }}(let {{ case.name }}):
                                return {{ case.name }}
                            default:
                                return nil
                        }
                    }
        
                {% endif %}
            {% endfor %}
        }

        public enum {{ enum.name }}Stripped: String, StrippedRepresentation {
            {% for case in enum.cases %}case {{ case.name }}
            {% endfor %}
        } 

        extension {{ enum.name }}Stripped {
            public var hashValue: Int {
                return rawValue.hashValue
            }

        }

        extension {{ enum.name }}: Hashable {
            public var hashValue: Int {
                return stripped.hashValue
            }
        }
        
        extension {{ enum.name }}: AssociatedValueStrippable {
        	public static func == (lhs: {{ enum.name }}, rhs: {{ enum.name }}) -> Bool {
        	    return lhs.stripped == rhs.stripped
        	}
        
            public typealias Stripped = {{ enum.name }}Stripped
            public var stripped: Stripped {
        		switch self {
        			{% for case in enum.cases %} case .{{ case.name }}:
        				return .{{ case.name }}
        			{% endfor %}
        		}
        	}
        }

    {% endif %}
{% endfor %}

extension Collection where Iterator.Element: AssociatedValueStrippable, Iterator.Element: Hashable {
    func contains<Stripped>(_ element: Stripped) -> Bool where Stripped == Iterator.Element.Stripped {
        return map { $0.stripped }.contains(element)
    }
}

extension Collection where Iterator.Element: AssociatedValueStrippable, Iterator.Element: AssociatedValueEnumExtractor {
    func associatedValue<AssociatedValue, Stripped>(_ element: Stripped) -> AssociatedValue? where Stripped == Iterator.Element.Stripped {
        for item in self {
            guard item.stripped == element else { continue }
            return item.associatedValueTyped()
        }
        return nil
    }
}
