{% macro compareVariables variables %}
	{% for variable in variables %}
		{% if not variable.annotations.skipEquality %}
			guard
			{% if not variable.isOptional %}
				{% if not variable.annotations.arrayEquality %}
					lhs.{{ variable.name }} == rhs.{{ variable.name }}
				{% else %}
					compareArrays(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==)
				{% endif %}
			{% else %}
				compareOptionals(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==)
			{% endif %}
			else { return false }
		{% endif %}
	{% endfor %}
{% endmacro %}

// MARK: - AutoEquatable for classes, protocols, structs
{% for type in types.implementing.AutoComparable|!enum %}
	// MARK: - {{ type.name }} AutoEquatable
	{% if not type.kind == "protocol" %}
		extension {{ type.name }}: Equatable {}
	{% endif %}
	
	{% if type.supertype.based.Equatable or type.supertype.implements.AutoEquatable %} THIS WONT COMPILE, WE DONT SUPPORT INHERITANCE for AutoEquatable {% endif %}
	
	{{ type.accessLevel }} func == (lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
	
	{% if not type.kind == "protocol" %}
		{% call compareVariables type.storedVariables %}
	{% else %}
		{% call compareVariables type.computedVariables %}
	{% endif %}

	return true
{% endfor %}
